{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"},{"sourceId":8431287,"sourceType":"datasetVersion","datasetId":5021145}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"raw","source":"","metadata":{}},{"cell_type":"raw","source":"IMPORT","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\ntest= pd.read_csv(r\"/kaggle/input/devices-prices-dataset1/test.csv\")\ntrain= pd.read_csv(r\"/kaggle/input/devices-prices-dataset1/train.csv\")\nprint(\"Test shape:\",test.shape,\", Train shape\",train.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:48.215928Z","iopub.execute_input":"2024-05-19T12:37:48.216374Z","iopub.status.idle":"2024-05-19T12:37:49.073006Z","shell.execute_reply.started":"2024-05-19T12:37:48.216326Z","shell.execute_reply":"2024-05-19T12:37:49.072000Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Test shape: (1000, 21) , Train shape (2000, 22)\n","output_type":"stream"}]},{"cell_type":"code","source":"train.head(4)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.075246Z","iopub.execute_input":"2024-05-19T12:37:49.075973Z","iopub.status.idle":"2024-05-19T12:37:49.115005Z","shell.execute_reply.started":"2024-05-19T12:37:49.075932Z","shell.execute_reply":"2024-05-19T12:37:49.113762Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   id  battery_power  blue  clock_speed  dual_sim   fc  four_g  int_memory  \\\n0   1            842     0          2.2         0  1.0     0.0         7.0   \n1   2           1021     1          0.5         1  0.0     1.0        53.0   \n2   3            563     1          0.5         1  2.0     1.0        41.0   \n3   4            615     1          2.5         0  0.0     0.0        10.0   \n\n   m_dep  mobile_wt  ...  px_height  px_width     ram  sc_h  sc_w  talk_time  \\\n0    0.6      188.0  ...       20.0     756.0  2549.0   9.0   7.0         19   \n1    0.7      136.0  ...      905.0    1988.0  2631.0  17.0   3.0          7   \n2    0.9      145.0  ...     1263.0    1716.0  2603.0  11.0   2.0          9   \n3    0.8      131.0  ...     1216.0    1786.0  2769.0  16.0   8.0         11   \n\n   three_g  touch_screen  wifi  price_range  \n0        0             0     1            1  \n1        1             1     0            2  \n2        1             1     0            2  \n3        1             0     0            2  \n\n[4 rows x 22 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>battery_power</th>\n      <th>blue</th>\n      <th>clock_speed</th>\n      <th>dual_sim</th>\n      <th>fc</th>\n      <th>four_g</th>\n      <th>int_memory</th>\n      <th>m_dep</th>\n      <th>mobile_wt</th>\n      <th>...</th>\n      <th>px_height</th>\n      <th>px_width</th>\n      <th>ram</th>\n      <th>sc_h</th>\n      <th>sc_w</th>\n      <th>talk_time</th>\n      <th>three_g</th>\n      <th>touch_screen</th>\n      <th>wifi</th>\n      <th>price_range</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>842</td>\n      <td>0</td>\n      <td>2.2</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>7.0</td>\n      <td>0.6</td>\n      <td>188.0</td>\n      <td>...</td>\n      <td>20.0</td>\n      <td>756.0</td>\n      <td>2549.0</td>\n      <td>9.0</td>\n      <td>7.0</td>\n      <td>19</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1021</td>\n      <td>1</td>\n      <td>0.5</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>53.0</td>\n      <td>0.7</td>\n      <td>136.0</td>\n      <td>...</td>\n      <td>905.0</td>\n      <td>1988.0</td>\n      <td>2631.0</td>\n      <td>17.0</td>\n      <td>3.0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>563</td>\n      <td>1</td>\n      <td>0.5</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>41.0</td>\n      <td>0.9</td>\n      <td>145.0</td>\n      <td>...</td>\n      <td>1263.0</td>\n      <td>1716.0</td>\n      <td>2603.0</td>\n      <td>11.0</td>\n      <td>2.0</td>\n      <td>9</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>615</td>\n      <td>1</td>\n      <td>2.5</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>10.0</td>\n      <td>0.8</td>\n      <td>131.0</td>\n      <td>...</td>\n      <td>1216.0</td>\n      <td>1786.0</td>\n      <td>2769.0</td>\n      <td>16.0</td>\n      <td>8.0</td>\n      <td>11</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>4 rows × 22 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test.head(4)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.116466Z","iopub.execute_input":"2024-05-19T12:37:49.116889Z","iopub.status.idle":"2024-05-19T12:37:49.134864Z","shell.execute_reply.started":"2024-05-19T12:37:49.116851Z","shell.execute_reply":"2024-05-19T12:37:49.133807Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   id  battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  \\\n0   1           1043     1          1.8         1  14       0           5   \n1   2            841     1          0.5         1   4       1          61   \n2   3           1807     1          2.8         0   1       0          27   \n3   4           1546     0          0.5         1  18       1          25   \n\n   m_dep  mobile_wt  ...  pc  px_height  px_width   ram  sc_h  sc_w  \\\n0    0.1        193  ...  16        226      1412  3476    12     7   \n1    0.8        191  ...  12        746       857  3895     6     0   \n2    0.9        186  ...   4       1270      1366  2396    17    10   \n3    0.5         96  ...  20        295      1752  3893    10     0   \n\n   talk_time  three_g  touch_screen  wifi  \n0          2        0             1     0  \n1          7        1             0     0  \n2         10        0             1     1  \n3          7        1             1     0  \n\n[4 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>battery_power</th>\n      <th>blue</th>\n      <th>clock_speed</th>\n      <th>dual_sim</th>\n      <th>fc</th>\n      <th>four_g</th>\n      <th>int_memory</th>\n      <th>m_dep</th>\n      <th>mobile_wt</th>\n      <th>...</th>\n      <th>pc</th>\n      <th>px_height</th>\n      <th>px_width</th>\n      <th>ram</th>\n      <th>sc_h</th>\n      <th>sc_w</th>\n      <th>talk_time</th>\n      <th>three_g</th>\n      <th>touch_screen</th>\n      <th>wifi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1043</td>\n      <td>1</td>\n      <td>1.8</td>\n      <td>1</td>\n      <td>14</td>\n      <td>0</td>\n      <td>5</td>\n      <td>0.1</td>\n      <td>193</td>\n      <td>...</td>\n      <td>16</td>\n      <td>226</td>\n      <td>1412</td>\n      <td>3476</td>\n      <td>12</td>\n      <td>7</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>841</td>\n      <td>1</td>\n      <td>0.5</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1</td>\n      <td>61</td>\n      <td>0.8</td>\n      <td>191</td>\n      <td>...</td>\n      <td>12</td>\n      <td>746</td>\n      <td>857</td>\n      <td>3895</td>\n      <td>6</td>\n      <td>0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1807</td>\n      <td>1</td>\n      <td>2.8</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>27</td>\n      <td>0.9</td>\n      <td>186</td>\n      <td>...</td>\n      <td>4</td>\n      <td>1270</td>\n      <td>1366</td>\n      <td>2396</td>\n      <td>17</td>\n      <td>10</td>\n      <td>10</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1546</td>\n      <td>0</td>\n      <td>0.5</td>\n      <td>1</td>\n      <td>18</td>\n      <td>1</td>\n      <td>25</td>\n      <td>0.5</td>\n      <td>96</td>\n      <td>...</td>\n      <td>20</td>\n      <td>295</td>\n      <td>1752</td>\n      <td>3893</td>\n      <td>10</td>\n      <td>0</td>\n      <td>7</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4 rows × 21 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Exploring the data","metadata":{}},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.137675Z","iopub.execute_input":"2024-05-19T12:37:49.138071Z","iopub.status.idle":"2024-05-19T12:37:49.158101Z","shell.execute_reply.started":"2024-05-19T12:37:49.138031Z","shell.execute_reply":"2024-05-19T12:37:49.157166Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2000 entries, 0 to 1999\nData columns (total 22 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   id             2000 non-null   int64  \n 1   battery_power  2000 non-null   int64  \n 2   blue           2000 non-null   int64  \n 3   clock_speed    2000 non-null   float64\n 4   dual_sim       2000 non-null   int64  \n 5   fc             1995 non-null   float64\n 6   four_g         1995 non-null   float64\n 7   int_memory     1995 non-null   float64\n 8   m_dep          1995 non-null   float64\n 9   mobile_wt      1996 non-null   float64\n 10  n_cores        1996 non-null   float64\n 11  pc             1995 non-null   float64\n 12  px_height      1996 non-null   float64\n 13  px_width       1998 non-null   float64\n 14  ram            1998 non-null   float64\n 15  sc_h           1999 non-null   float64\n 16  sc_w           1999 non-null   float64\n 17  talk_time      2000 non-null   int64  \n 18  three_g        2000 non-null   int64  \n 19  touch_screen   2000 non-null   int64  \n 20  wifi           2000 non-null   int64  \n 21  price_range    2000 non-null   int64  \ndtypes: float64(13), int64(9)\nmemory usage: 343.9 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"test.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.159311Z","iopub.execute_input":"2024-05-19T12:37:49.159679Z","iopub.status.idle":"2024-05-19T12:37:49.171252Z","shell.execute_reply.started":"2024-05-19T12:37:49.159645Z","shell.execute_reply":"2024-05-19T12:37:49.170148Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1000 entries, 0 to 999\nData columns (total 21 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   id             1000 non-null   int64  \n 1   battery_power  1000 non-null   int64  \n 2   blue           1000 non-null   int64  \n 3   clock_speed    1000 non-null   float64\n 4   dual_sim       1000 non-null   int64  \n 5   fc             1000 non-null   int64  \n 6   four_g         1000 non-null   int64  \n 7   int_memory     1000 non-null   int64  \n 8   m_dep          1000 non-null   float64\n 9   mobile_wt      1000 non-null   int64  \n 10  n_cores        1000 non-null   int64  \n 11  pc             1000 non-null   int64  \n 12  px_height      1000 non-null   int64  \n 13  px_width       1000 non-null   int64  \n 14  ram            1000 non-null   int64  \n 15  sc_h           1000 non-null   int64  \n 16  sc_w           1000 non-null   int64  \n 17  talk_time      1000 non-null   int64  \n 18  three_g        1000 non-null   int64  \n 19  touch_screen   1000 non-null   int64  \n 20  wifi           1000 non-null   int64  \ndtypes: float64(2), int64(19)\nmemory usage: 164.2 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"pd.DataFrame(train.isna().sum()).T","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.172510Z","iopub.execute_input":"2024-05-19T12:37:49.172803Z","iopub.status.idle":"2024-05-19T12:37:49.192458Z","shell.execute_reply.started":"2024-05-19T12:37:49.172779Z","shell.execute_reply":"2024-05-19T12:37:49.191570Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   id  battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  \\\n0   0              0     0            0         0   5       5           5   \n\n   m_dep  mobile_wt  ...  px_height  px_width  ram  sc_h  sc_w  talk_time  \\\n0      5          4  ...          4         2    2     1     1          0   \n\n   three_g  touch_screen  wifi  price_range  \n0        0             0     0            0  \n\n[1 rows x 22 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>battery_power</th>\n      <th>blue</th>\n      <th>clock_speed</th>\n      <th>dual_sim</th>\n      <th>fc</th>\n      <th>four_g</th>\n      <th>int_memory</th>\n      <th>m_dep</th>\n      <th>mobile_wt</th>\n      <th>...</th>\n      <th>px_height</th>\n      <th>px_width</th>\n      <th>ram</th>\n      <th>sc_h</th>\n      <th>sc_w</th>\n      <th>talk_time</th>\n      <th>three_g</th>\n      <th>touch_screen</th>\n      <th>wifi</th>\n      <th>price_range</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows × 22 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"pd.DataFrame(test.isna().sum()).T","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.193484Z","iopub.execute_input":"2024-05-19T12:37:49.193746Z","iopub.status.idle":"2024-05-19T12:37:49.208625Z","shell.execute_reply.started":"2024-05-19T12:37:49.193716Z","shell.execute_reply":"2024-05-19T12:37:49.207673Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   id  battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  \\\n0   0              0     0            0         0   0       0           0   \n\n   m_dep  mobile_wt  ...  pc  px_height  px_width  ram  sc_h  sc_w  talk_time  \\\n0      0          0  ...   0          0         0    0     0     0          0   \n\n   three_g  touch_screen  wifi  \n0        0             0     0  \n\n[1 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>battery_power</th>\n      <th>blue</th>\n      <th>clock_speed</th>\n      <th>dual_sim</th>\n      <th>fc</th>\n      <th>four_g</th>\n      <th>int_memory</th>\n      <th>m_dep</th>\n      <th>mobile_wt</th>\n      <th>...</th>\n      <th>pc</th>\n      <th>px_height</th>\n      <th>px_width</th>\n      <th>ram</th>\n      <th>sc_h</th>\n      <th>sc_w</th>\n      <th>talk_time</th>\n      <th>three_g</th>\n      <th>touch_screen</th>\n      <th>wifi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows × 21 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"1 split","metadata":{}},{"cell_type":"code","source":"y_trainV1=train['price_range']\ny = y_trainV1\n\ntid=train['id']\ntestId_SUBMIT = test['id']","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.210065Z","iopub.execute_input":"2024-05-19T12:37:49.210648Z","iopub.status.idle":"2024-05-19T12:37:49.217732Z","shell.execute_reply.started":"2024-05-19T12:37:49.210620Z","shell.execute_reply":"2024-05-19T12:37:49.216876Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"Fill NA. \nIn the description data file, the Na of the object variables are mostly absent of a house attribute, such as pool, etc. then these were filled with 0 because they are important data for the prediction.\n\nthe numerical data were filled with the mean","metadata":{}},{"cell_type":"code","source":"train=train.drop(\"price_range\",axis=1)\nx= train\n\nfor column in train.columns:\n    typ = train[column].dtype\n    if typ == \"object\":\n        train[column] = train[column].fillna(train[column].mode()[0])\n        test[column] = test[column].fillna(test[column].mode()[0])\n    else:\n        train[column] = train[column].fillna(train[column].mean())\n        test[column] = test[column].fillna(test[column].mean())","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.218956Z","iopub.execute_input":"2024-05-19T12:37:49.219234Z","iopub.status.idle":"2024-05-19T12:37:49.241100Z","shell.execute_reply.started":"2024-05-19T12:37:49.219208Z","shell.execute_reply":"2024-05-19T12:37:49.240162Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"pd.DataFrame(train.isna().sum()).T","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.244227Z","iopub.execute_input":"2024-05-19T12:37:49.244581Z","iopub.status.idle":"2024-05-19T12:37:49.260705Z","shell.execute_reply.started":"2024-05-19T12:37:49.244558Z","shell.execute_reply":"2024-05-19T12:37:49.259750Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   id  battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  \\\n0   0              0     0            0         0   0       0           0   \n\n   m_dep  mobile_wt  ...  pc  px_height  px_width  ram  sc_h  sc_w  talk_time  \\\n0      0          0  ...   0          0         0    0     0     0          0   \n\n   three_g  touch_screen  wifi  \n0        0             0     0  \n\n[1 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>battery_power</th>\n      <th>blue</th>\n      <th>clock_speed</th>\n      <th>dual_sim</th>\n      <th>fc</th>\n      <th>four_g</th>\n      <th>int_memory</th>\n      <th>m_dep</th>\n      <th>mobile_wt</th>\n      <th>...</th>\n      <th>pc</th>\n      <th>px_height</th>\n      <th>px_width</th>\n      <th>ram</th>\n      <th>sc_h</th>\n      <th>sc_w</th>\n      <th>talk_time</th>\n      <th>three_g</th>\n      <th>touch_screen</th>\n      <th>wifi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows × 21 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"pd.DataFrame(test.isna().sum()).T","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.261825Z","iopub.execute_input":"2024-05-19T12:37:49.262123Z","iopub.status.idle":"2024-05-19T12:37:49.280229Z","shell.execute_reply.started":"2024-05-19T12:37:49.262100Z","shell.execute_reply":"2024-05-19T12:37:49.279280Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"   id  battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  \\\n0   0              0     0            0         0   0       0           0   \n\n   m_dep  mobile_wt  ...  pc  px_height  px_width  ram  sc_h  sc_w  talk_time  \\\n0      0          0  ...   0          0         0    0     0     0          0   \n\n   three_g  touch_screen  wifi  \n0        0             0     0  \n\n[1 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>battery_power</th>\n      <th>blue</th>\n      <th>clock_speed</th>\n      <th>dual_sim</th>\n      <th>fc</th>\n      <th>four_g</th>\n      <th>int_memory</th>\n      <th>m_dep</th>\n      <th>mobile_wt</th>\n      <th>...</th>\n      <th>pc</th>\n      <th>px_height</th>\n      <th>px_width</th>\n      <th>ram</th>\n      <th>sc_h</th>\n      <th>sc_w</th>\n      <th>talk_time</th>\n      <th>three_g</th>\n      <th>touch_screen</th>\n      <th>wifi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows × 21 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"LABERENCODER, STANDARDSCALE AND TRAIN/TEST SPLIT","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor col in train.columns:\n    if train[col].dtype == \"object\":\n        train[col] = le.fit_transform(train[col]).astype(int)\n        test[col] = le.fit_transform(test[col]).astype(int)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:49.281411Z","iopub.execute_input":"2024-05-19T12:37:49.281737Z","iopub.status.idle":"2024-05-19T12:37:50.198657Z","shell.execute_reply.started":"2024-05-19T12:37:49.281712Z","shell.execute_reply":"2024-05-19T12:37:50.197603Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, x_test,Y_train, y_test = train_test_split (x,y, test_size= 0.2, random_state=0)\n\nprint(\n      X_train.shape,\n      Y_train.shape,\n      x_test.shape,\n      y_test.shape\n      )\n\n#I SPLIT THE DATA IN A WAY THAT I CAN HAVE THE Y_TEST","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:50.202298Z","iopub.execute_input":"2024-05-19T12:37:50.202596Z","iopub.status.idle":"2024-05-19T12:37:50.296375Z","shell.execute_reply.started":"2024-05-19T12:37:50.202571Z","shell.execute_reply":"2024-05-19T12:37:50.295399Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"(1600, 21) (1600,) (400, 21) (400,)\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train=sc_X.fit_transform(X_train)\nx_test=sc_X.transform(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:50.297430Z","iopub.execute_input":"2024-05-19T12:37:50.297713Z","iopub.status.idle":"2024-05-19T12:37:50.311690Z","shell.execute_reply.started":"2024-05-19T12:37:50.297688Z","shell.execute_reply":"2024-05-19T12:37:50.310656Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":"XGBOOST\n","metadata":{}},{"cell_type":"code","source":"import xgboost as xgb\nmodelXGB = xgb.XGBRegressor()\nmodelXGB.set_params(n_estimators=100, max_depth=5, learning_rate=0.1)\nmodelXGB.fit(X_train, Y_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:50.313104Z","iopub.execute_input":"2024-05-19T12:37:50.313481Z","iopub.status.idle":"2024-05-19T12:37:51.292328Z","shell.execute_reply.started":"2024-05-19T12:37:50.313448Z","shell.execute_reply":"2024-05-19T12:37:51.291359Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=5, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=100, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=5, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=100, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.1, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=5, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=100, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"y_predXGB = modelXGB.predict(x_test)\n#y_predSUBMIT = modelXGB.predict(test)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:51.293604Z","iopub.execute_input":"2024-05-19T12:37:51.293922Z","iopub.status.idle":"2024-05-19T12:37:51.302071Z","shell.execute_reply.started":"2024-05-19T12:37:51.293896Z","shell.execute_reply":"2024-05-19T12:37:51.301298Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error\n\n# Calculate MSE\nmseXGB = mean_squared_error(y_test, y_predXGB)\nprint(\"Mean Squared Error (MSE):\", mseXGB)\nfrom sklearn.metrics import r2_score\n\nr2XGB = r2_score(y_test, y_predXGB)\nprint(\"R-Squared:\", r2XGB)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:51.303188Z","iopub.execute_input":"2024-05-19T12:37:51.303661Z","iopub.status.idle":"2024-05-19T12:37:51.309874Z","shell.execute_reply.started":"2024-05-19T12:37:51.303633Z","shell.execute_reply":"2024-05-19T12:37:51.309171Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Mean Squared Error (MSE): 0.07497604591939894\nR-Squared: 0.9418158886237786\n","output_type":"stream"}]},{"cell_type":"markdown","source":"SVR","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVR\nmodelSVR = SVR(kernel='rbf')\nmodelSVR.fit(X_train, Y_train)\n\ny_predSVR = modelSVR.predict(x_test)\nmseSVR = mean_squared_error(y_test, y_predSVR)\nprint(\"Mean Squared Error (MSE):\", mseSVR)\nfrom sklearn.metrics import r2_score\n\nr2SVR = r2_score(y_test, y_predSVR)\nprint(\"R-Squared:\", r2SVR)\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:51.310938Z","iopub.execute_input":"2024-05-19T12:37:51.311398Z","iopub.status.idle":"2024-05-19T12:37:51.684925Z","shell.execute_reply.started":"2024-05-19T12:37:51.311374Z","shell.execute_reply":"2024-05-19T12:37:51.683992Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Mean Squared Error (MSE): 0.12839588251268666\nR-Squared: 0.9003601718821305\n","output_type":"stream"}]},{"cell_type":"markdown","source":"FOREST\n","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nmodelRF = RandomForestRegressor(n_estimators=20,random_state=1)\nmodelRF.fit(X_train, Y_train)\n\ny_predRF = modelRF.predict(x_test)\nmseRF = mean_squared_error(y_test, y_predRF)\nprint(\"Mean Squared Error (MSE):\", mseRF)\n\n\nr2RF = r2_score(y_test, y_predRF)\nprint(\"R-Squared:\", r2RF)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:51.686060Z","iopub.execute_input":"2024-05-19T12:37:51.686351Z","iopub.status.idle":"2024-05-19T12:37:51.999375Z","shell.execute_reply.started":"2024-05-19T12:37:51.686326Z","shell.execute_reply":"2024-05-19T12:37:51.998367Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Mean Squared Error (MSE): 0.09026250000000001\nR-Squared: 0.9299530498215117\n","output_type":"stream"}]},{"cell_type":"markdown","source":"LASSO","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import Lasso\n\nmodelLasso = Lasso()\nmodelLasso.fit(X_train, Y_train)\ny_predLasso = modelLasso.predict(x_test)\n\nmseLasso = mean_squared_error(y_test, y_predLasso)\nprint(\"Mean Squared Error (MSE):\", mseLasso)\n\n\nr2Lasso = r2_score(y_test, y_predLasso)\nprint(\"R-Squared:\", r2Lasso)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:52.000786Z","iopub.execute_input":"2024-05-19T12:37:52.001214Z","iopub.status.idle":"2024-05-19T12:37:52.017274Z","shell.execute_reply.started":"2024-05-19T12:37:52.001178Z","shell.execute_reply":"2024-05-19T12:37:52.016252Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Mean Squared Error (MSE): 1.2602766488813497\nR-Squared: 0.021979940337304327\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Results: choose the \"best regression\"","metadata":{}},{"cell_type":"code","source":"\ndata_results = [\n    [\"XGB\", mseXGB, r2XGB],\n    [\"SVR\", mseSVR, r2SVR],\n    [\"FOREST\", mseRF, r2RF],\n    [\"LASSO\", mseLasso, r2Lasso],\n]\n\nresults = pd.DataFrame(data_results, columns=[\"Model\", \"Mean Squared Error (MSE)\", \"R-Squared\"])\nprint(results.to_string())","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:52.018708Z","iopub.execute_input":"2024-05-19T12:37:52.023611Z","iopub.status.idle":"2024-05-19T12:37:52.033348Z","shell.execute_reply.started":"2024-05-19T12:37:52.023568Z","shell.execute_reply":"2024-05-19T12:37:52.032340Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"    Model  Mean Squared Error (MSE)  R-Squared\n0     XGB                  0.074976   0.941816\n1     SVR                  0.128396   0.900360\n2  FOREST                  0.090263   0.929953\n3   LASSO                  1.260277   0.021980\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 6))\nbars = plt.bar(results[\"Model\"], results[\"R-Squared\"], color='skyblue', alpha=0.7)\n\nplt.bar_label(bars, fmt=\"{:.2f}\".format)  \n\nplt.xlabel(\"Model\")\nplt.ylabel(\"R-Squared\")\nplt.title(\"R-Squared Comparison\")\nplt.xticks(rotation=45, ha=\"right\")\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:52.034605Z","iopub.execute_input":"2024-05-19T12:37:52.035595Z","iopub.status.idle":"2024-05-19T12:37:52.392448Z","shell.execute_reply.started":"2024-05-19T12:37:52.035561Z","shell.execute_reply":"2024-05-19T12:37:52.391485Z"},"trusted":true},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAxYAAAJOCAYAAAAqFJGJAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABTjElEQVR4nO3deVxV1f7/8fdhBlE0URTEUJxzQFHJAUcUhxwyhyYHUsvSUmlQyynthvPF0iLNKdOvZppNiimm5dDVnM0x5wnUVCAcQNi/P/p5bueCExs5kK/n48HjdtZee5/PPnc/8LxZa+1tMQzDEAAAAACY4GDvAgAAAADkfwQLAAAAAKYRLAAAAACYRrAAAAAAYBrBAgAAAIBpBAsAAAAAphEsAAAAAJhGsAAAAABgGsECAAAAgGkECwBAjlu3bp0sFovWrVtn71LyBYvFotGjR9u7DAAwhWABAP9j7ty5slgs1h8nJyf5+fmpV69eOnPmzD0fZ8OGDWrdurX8/Pzk5uam0qVLq127dlq4cOEDrD5/OnLkiF566SWVLVtWbm5uKlSokBo0aKCpU6fq2rVr9i4PAHAPnOxdAADkVWPGjFGZMmV0/fp1/fLLL5o7d642bNigvXv3ys3N7Y77LlmyRN26dVNQUJAGDhyoIkWK6NixY/rpp580c+ZMPfvss7l0Fnnf999/ry5dusjV1VU9evRQ1apVlZqaqg0bNujNN9/Ub7/9phkzZti7zAfq2rVrcnLin2QA+Ru/xQDgNlq3bq3atWtLkvr06SNvb2+NHz9e33zzjbp27XrHfUePHq0qVarol19+kYuLi8228+fPP7CazcrIyFBqaupdg1NOOXbsmJ5++mk9+uijWrt2rUqWLGnd1r9/f/3+++/6/vvvc6WW3Pb3zzq3Pm8AeJCYCgUA9yg0NFTSX9N27ubIkSOqU6dOplAhScWLF7d5feXKFfXq1UteXl4qXLiwevbsqZ07d8pisWju3LnWfk2aNFGTJk0yHa9Xr14KCAiwaZs0aZLq16+vokWLyt3dXcHBwfryyy8z7WuxWDRgwAAtWLBAjz32mFxdXRUbGytJOnPmjF544QX5+PjI1dVVjz32mGbPnp3pGKdPn1bHjh1VoEABFS9eXIMHD9aNGzfu+hlJ0oQJE/Tnn39q1qxZNqHilnLlymngwIHW1zdv3tTYsWMVGBgoV1dXBQQE6O233870fgEBAXriiSe0bt061a5dW+7u7qpWrZp1zceyZctUrVo1ubm5KTg4WDt27Mj0mXp6euro0aMKDw9XgQIF5OvrqzFjxsgwjBz/rP93jUVycrIGDRqkgIAAubq6qnjx4mrRooW2b99uc8wlS5YoODhY7u7u8vb21vPPP59put6tczlz5ow6duwoT09PFStWTG+88YbS09Nv8/8MANw/RiwA4B4dP35cklSkSJG79n300UcVFxen06dPq1SpUrftZxiGOnTooA0bNqhfv36qXLmyvvrqK/Xs2dNUrVOnTlX79u313HPPKTU1VYsWLVKXLl303XffqW3btjZ9165dqy+++EIDBgyQt7e3AgIClJCQoMcff9z6ZbhYsWJauXKlevfuraSkJA0aNEjSX1N4mjdvrpMnT+q1116Tr6+v5s+fr7Vr195Tnd9++63Kli2r+vXr31P/Pn36aN68eercubNef/11/ec//1FUVJT279+vr776yqbv77//rmeffVYvvfSSnn/+eU2aNEnt2rVTTEyM3n77bb3yyiuSpKioKHXt2lUHDx6Ug8N//96Wnp6uVq1a6fHHH9eECRMUGxurUaNG6ebNmxozZkyOfdZZ6devn7788ksNGDBAVapU0R9//KENGzZo//79qlWrlqS/1gJFRESoTp06ioqKUkJCgqZOnaqNGzdqx44dKly4sM25hIeHKyQkRJMmTdKaNWs0efJkBQYG6uWXX76nzx4A7soAANiYM2eOIclYs2aNceHCBePUqVPGl19+aRQrVsxwdXU1Tp06dddjzJo1y5BkuLi4GE2bNjVGjBhh/Pzzz0Z6erpNv+XLlxuSjAkTJljbbt68aYSGhhqSjDlz5ljbGzdubDRu3DjTe/Xs2dN49NFHbdquXr1q8zo1NdWoWrWq0axZM5t2SYaDg4Px22+/2bT37t3bKFmypHHx4kWb9qefftrw8vKyHj86OtqQZHzxxRfWPikpKUa5cuUMScaPP/6Y5edjGIaRmJhoSDI6dOhw2z5/t3PnTkOS0adPH5v2N954w5BkrF271tr26KOPGpKMTZs2WdtWrVplSDLc3d2NEydOWNs/+eSTTLX27NnTkGS8+uqr1raMjAyjbdu2houLi3HhwgVru9nP+ta2UaNGWV97eXkZ/fv3v+1nkZqaahQvXtyoWrWqce3aNWv7d999Z0gyRo4cmelcxowZY3OMmjVrGsHBwbd9DwC4X0yFAoDbCAsLU7FixeTv76/OnTurQIEC+uabb+44AnHLCy+8oNjYWDVp0kQbNmzQ2LFjFRoaqvLly2vTpk3WfitWrJCTk5PNX40dHR316quvmqrd3d3d+t+XL19WYmKiQkNDM02lkaTGjRurSpUq1teGYWjp0qVq166dDMPQxYsXrT/h4eFKTEy0HmfFihUqWbKkOnfubN3fw8NDL7744l1rTEpKkiQVLFjwns5pxYoVkqTIyEib9tdff12SMq3FqFKliurVq2d9HRISIklq1qyZSpcunan96NGjmd5zwIAB1v++NXqTmpqqNWvWWNvNfNa3U7hwYf3nP//R2bNns9z+66+/6vz583rllVds1me0bdtWlSpVynJdSr9+/Wxeh4aGZnnOAJBdTIUCgNuYPn26KlSooMTERM2ePVs//fSTXF1drdtTU1N16dIlm32KFSsmR0dHSVJ4eLjCw8N19epVbdu2TYsXL1ZMTIyeeOIJHThwQMWLF9eJEydUsmRJeXp62hynYsWKpmr/7rvv9N5772nnzp026w8sFkumvmXKlLF5feHCBV25ckUzZsy47d2Ybi1AP3HihMqVK5fpuPdSf6FChST9tZ7gXpw4cUIODg4qV66cTXuJEiVUuHBhnThxwqb97+FBkry8vCRJ/v7+WbZfvnzZpt3BwUFly5a1aatQoYKk/06Lk8x91rczYcIE9ezZU/7+/goODlabNm3Uo0cPaz23zjWrz7lSpUrasGGDTZubm5uKFStm01akSJFM5wwAZhAsAOA26tata70rVMeOHdWwYUM9++yzOnjwoDw9PbVp0yY1bdrUZp9jx45lmjfv4eGh0NBQhYaGytvbW++++65Wrlx53+soLBZLpoXDkjItwP3555/Vvn17NWrUSB999JFKliwpZ2dnzZkzJ8tnaPz9L+7SX3crkqTnn3/+tjVWr179vmrPSqFCheTr66u9e/fe135ZfWHPyq2Ad6/tWX22d2P2s76drl27KjQ0VF999ZV++OEHTZw4UePHj9eyZcvUunXr+67zducMADmJYAEA98DR0VFRUVFq2rSppk2bpqFDh6pGjRpavXq1Tb8SJUrc8Ti3gsq5c+ck/XeR959//mkzanHw4MFM+xYpUiTLqSv/+5f6pUuXys3N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b9fWrVsfaP0AAADIHkYsYHdTp05V+fLlValSJbm4uGjAgAGKiIiQg8Nfl+epU6c0cOBALViwINPIBgA8bHL65hgff/yxqlevrkKFCqlQoUKqV6+eVq5c+aBPA8A/EMECOcrb21uOjo5KSEiwaU9ISFCJEiWy3KdYsWJavny5UlJSdOLECR04cECenp4qW7asJGnbtm06f/68atWqJScnJzk5OWn9+vX64IMP5OTkZDOyAQD/ZA/i5hilSpXSuHHjtG3bNv36669q1qyZOnTooN9++y23TgvAP4TFMAzD3kXkpqSkJHl5eSkxMVGFChWydzn/SCEhIapbt64+/PBDSVJGRoZKly6tAQMGaOjQoXfdPy0tTZUrV1bXrl31/vvvKzk5WSdOnLDpExERoUqVKmnIkCGqWrXqAzkPAMhrQkJCVKdOHU2bNk3SX79f/f399eqrr2b5+9XX11fvvPOO+vfvb2176qmn5O7urs8///y27/PII49o4sSJ6t27d86fBIB85X6+O7PGAjkuMjJSPXv2VO3atVW3bl1FR0crJSVFERERkqQePXrIz89PUVFRkqT//Oc/OnPmjIKCgnTmzBmNHj1aGRkZeuuttyRJBQsWzBQeChQooKJFixIqADw0bt0cY9iwYda2nLo5xi3p6elasmSJUlJSVK9evZwrHsBDgWCBHNetWzdduHBBI0eOVHx8vIKCghQbG2td0H3y5Enr+glJun79uoYPH66jR4/K09NTbdq00fz581W4cGE7nQEA5D0P6uYYkrRnzx7Vq1dP169fl6enp7766itVqVLlgZ0LgH8mpkIBAJAPnD17Vn5+ftq0aZPNaMJbb72l9evX6z//+U+mfS5cuKC+ffvq22+/lcViUWBgoMLCwjR79mxdu3bN2i81NVUnT55UYmKivvzyS3366adav3494QLAfX13ZvE2AAD5wIO4OcYtLi4uKleunIKDgxUVFaUaNWpo6tSpD+xcAPwzESwAAMgHXFxcFBwcrLi4OGtbRkaG4uLi7roews3NTX5+frp586aWLl2qDh063LF/RkaGbty4kSN1A3h4sMbCTpYcSbR3CcgHugR62bsEAHlITt8cQ5KGDRum1q1bq3Tp0kpOTtbChQu1bt06rVq1yi7nCCD/IlgAAJBPPIibY5w/f149evTQuXPn5OXlperVq2vVqlVq0aJF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N9kKFnXq1FFkZKQSEhKsbQkJCXrzzTdVt27dHCsOAAAAQP6QrWAxe/ZsnTt3TqVLl1a5cuVUrlw5lS5dWmfOnNGsWbNyukYAAAAAeVy21liUK1dOu3fv1urVq3XgwAFJUuXKlRUWFpbpidwAAAAA/vmy/Zhsi8Wili1bqmXLljlZDwAAAIB86L6mQm3evFnfffedTdtnn32mMmXKqHjx4nrxxRd148aNHC0QAAAAQN53X8FizJgx+u2336yv9+zZo969eyssLExDhw7Vt99+q6ioqBwvEgAAAEDedl/BYufOnWrevLn19aJFixQSEqKZM2cqMjJSH3zwgb744oscLxIAAABA3nZfweLy5cvy8fGxvl6/fr1at25tfV2nTh2dOnUq56oDAAAAkC/cV7Dw8fHRsWPHJEmpqanavn27Hn/8cev25ORkOTs752yFAAAAAPK8+woWbdq00dChQ/Xzzz9r2LBh8vDwUGhoqHX77t27FRgYmONFAgAAAMjb7ut2s2PHjlWnTp3UuHFjeXp6at68eXJxcbFunz17NrefBQAAAB5C9xUsvL299dNPPykxMVGenp5ydHS02b5kyRJ5enrmaIEAAAAA8r77mgp1i5eXlzVU/N///Z9SUlIkSY888ojNCAYAAACAh0O2gsXfvfTSS0pISMiJWgAAAADkU6aDhWEYOVEHAAAAgHzMdLD4X9euXcvpQwIAAADI40wHi5UrV8rPz083btzQ5MmTVaZMmZyoCwAAAEA+cl/B4saNGxo2bJhq166t+vXra/ny5WrYsKEWLlyoMmXKKDo6WoMHD35QtQIAAADIo+7rdrMjR47UJ598orCwMG3atEldunRRRESEfvnlF02ZMkVdunTJdAtaAAAAAP989xUslixZos8++0zt27fX3r17Vb16dd28eVO7du2SxWJ5UDUCAAAAyOPuayrU6dOnFRwcLEmqWrWqXF1dNXjwYEIFAAAA8JC7r2CRnp5u8wA8JycnnrQNAAAA4P6mQhmGoV69esnV1VWSdP36dfXr108FChSw6bds2bKcqxAAAABAnndfwaJnz542r59//vkcLQYAAABA/nRfwWLOnDkPqg4AAAAA+ViOP3kbAAAAwMOHYAEAAADANIIFAAAAANPyRLCYPn26AgIC5ObmppCQEG3ZsuWe9lu0aJEsFos6duz4YAsEAAAAcEd2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zx7NmTNHVapUkaOjo8qUKaPWrVurdevWSktLk7OzM3fUgV0VKlRI06dPV3h4uH744QddunRJEydOVPPmzVWuXDmlpaVp8eLF+uOPPySJUAG7Cg4O1vfff68WLVooICBAKSkpWrx4scLCwmx+l86aNUsVK1ZUw4YN7VwxHkY3b97U4cOH9dxzz1nbbv1RcdGiRbp586Zat26toUOHqmzZsjpw4IBKlCih1atXq3z58nasHPbCiAUySU5OVsGCBbVjxw4dOHBAp0+f1ty5c7V//375+fnp5s2beuyxx+Tr66u6deuqXr16Cg4OJlggTzh16pTOnz+vRx99VN7e3tb2jIwMPf3006pYsaLGjBkjibtAIfdcuXJFly5dkouLi/z8/KzX3q5du9S1a1cVLFhQP/30k820vJEjR+q9997TgQMHWAMEu+nUqZPOnz+vWbNmadGiRfr8889Vp04dtW3bVm5ubho2bJi6d++uESNGKCUlRY6OjnJzc7N32bATggUyySogTJw4Ubt379brr7+uCxcuaN26ddqxY4cuX76szz77jL9MIE9LTU3V2LFjNXv2bK1bt47rFblq79696tevn86cOSMPDw916dJFI0aMkKOjo6S/wkXLli0VEhKiefPmqUiRIho1apQmTZqkn376ScHBwXY+Azxs/j5VdMWKFXr33Xd17NgxGYah8ePHq0mTJipbtqwkqWPHjrp+/bpWrFjBSDAIFrg3S5YssT4Y7+9PzExJSeEJxcjTPv/8c23dulWLFy/WypUrmfOLXLVr1y6FhoYqIiJCLVu2tM5B//TTT9WpUyfrF7idO3cqPDxcTZo0UUBAgD744ANt2LCBUIFcldW/6YZh6I8//tDJkyfl7++vYsWKWdvT0tKsayv//gRuPLxYY4G7MgxD1apVU8GCBa33o05PT5ejoyN300GedvDgQc2aNUtFihTRjz/+yEPFkKsOHjyoBg0aaNCgQdZbypYuXVo1atTQ3r171alTJ+tfeIOCgrRq1So1bNhQV69e1bZt2wjByFX79u1T27Zt1b17d7Vv3141atSQs7OzLBaLvL29baaWSn+NaowdO1YbN27U2LFjCRWQRLDAPbBYLKpUqZI8PDz0448/KjAw0DqEzy8S5GUVK1bU4sWL5erqygMbkasyMjI0fvx4ubm5qVq1atb25cuXS5LOnTunGTNmqEKFCmrYsKGcnJwUFBSkX375Re7u7goMDLRT5XhYrV+/XklJSVq7dq0OHjyoM2fOKDo6Wr6+vvL19bXpu2DBAq1fv15ff/21YmNjWQMEK4IF7urWmgt3d3cdO3bM3uUA96V48eL2LgEPIQcHB40ZM0ZJSUn66KOP5O7urn379mny5Ml67bXXVLNmTX300UeyWCw6d+6cGjVqpF69eql58+b2Lh0PqUaNGumpp55S9+7dFRAQoGHDhmnQoEHy9PRU9+7d1bp1az3yyCPau3evNmzYoOTkZK1fv9764FFAYo0F7sPHH3+s0NBQVa1a1d6lAEC+cPLkSb366qvav3+/zpw5o+XLl1ufU3Hjxg1du3ZN0dHR2r17t6KiolSxYkU7V4yHWYcOHeTq6qovvvhCknTo0CGFhYXp7Nmzatu2rWrUqKG+fftKkooUKSJPT097los8iGCBe8btZAHg9v744w+dP39e+/btU+XKlVW4cGH5+vrq1KlTioyM1OHDh/XWW2/p2WeflfTftWqSdP36dW7RCbu5dROBgwcP6tlnn9WUKVPUuHFjRUREaMOGDZo0aZL27t2radOmqXjx4tqwYYMKFixo77KRBxEsAAAwae/everTp4+uXLmio0ePytHRUWXLltWHH36oZs2a6fTp0xowYIAuX76sF154QT179pT01wPInJyYlYy84fLly4qIiFBoaKh+++03rVy5Ut9++61q164t6a8AfP78eZUuXdrOlSKvIlgAAGDCvn37VK9ePb300kvq3Lmzqlatqjlz5mjBggXatm2bFi1apCeffFInTpzQwIEDlZycrK5du+qll16yd+l4CN1tdOy7775T+/btVbx4ca1bt866hoJZC7gXBAsAALIpJSVFXbp0Ufny5TV16lSbL19bt27V8OHDtXHjRm3atEnVq1fXmTNn1L17d3l4eGjBggXcrQy56syZMxo8eLBefvllNW3aNNN2wzB07do19ezZU35+foqOjrZ5WB5wN1wpAABkU3p6uk6cOKFGjRpZ2zIyMiRJderU0ZAhQ1S4cGHNmTNHGRkZ8vPz04IFCxQTE0OoQK67ceOGTp8+rcmTJ2vjxo2ZtlssFnl4eKhWrVr66quvdOnSJUIF7gtXCwAA9+nq1auSpLNnz2r//v0qUqSIdZuDg4NuTQZo1qyZ6tSpo61bt8rBwUHp6ekqWbKkSpUqZZe68XArW7as5s2bp/T0dOvD7W4xDMN63Q4aNEhOTk56++237VUq8imCBQAA92Hbtm2qXr26jh8/Lm9vb/n7+2vp0qVKTk62ToOyWCzWkYuSJUvKw8NDkqx3gQLspXz58vrggw9ksVhswoXFYpHFYtGNGzc0evRoNWvWTEOGDLFztchvCBYAANyjXbt2qWnTpnriiScUEBAgb29vtWjRQnPnztXatWuVmppq7XtrCskff/yhoKAgSRLLGpEX3C5cpKam6vXXX9fEiRM1YMAAlSlTxs6VIr9h8TYAAPdg9+7dqlevngYNGqR//etf1oXaFy5cUEREhLZu3aoJEyaoVatW8vHx0Z9//qkJEybo448/1saNG1WhQgV7nwJg4/Dhw3rttddkGIaGDh2qlStX6sMPP9TGjRtVs2ZNe5eHfIhgAQDAXZw6dUq1atVSs2bNtHjxYmv7v//9b509e1a9e/fWoEGDtHr1apUqVUqPPvqoHB0ddfjwYX3zzTeqVauWHasHbu/w4cOKjIzUxo0blZKSos2bN3O9ItuYCgUAwF2kp6erTJkyun79unXayLhx4zRq1Cg98cQTqlSpkmJjYxUTE6Onn35agYGBevrpp/Xzzz/zJQ15Wvny5TVp0iSFhoZq+/btXK8whRELAADuwa1pIy4uLvLx8dHXX3+t+fPnq2XLltzrH/leWlqanJ2d7V0G8jl+CwIAcA9uPQTv2rVr+vzzz/XWW2+pZcuWkmxvMQvkR4QK5ARGLAAAuA9HjhzRK6+8IkdHR7399ttq2LChJNk8dRsAHkaMWAAAcB8CAwM1bdo0GYah9957z+Y5AADwMCNYAABwn249B8DZ2VlvvPGGfvnlF3uXBAB2R7AAACAbypcvr4kTJ6pUqVLy9fW1dzkAYHessQAAwITU1FS5uLjYuwwAsDuCBQAAAADTmAoFAAAAwDSCBQAAAADTCBYAAAAATCNYAAAAADCNYAEAAADANIIFAAAAANMIFgCAPGvdunWyWCy6cuXKPe8TEBCg6OjoB1YTACBrBAsAQLb16tVLFotF/fr1y7Stf//+slgs6tWrV+4XBgDIdQQLAIAp/v7+WrRoka5du2Ztu379uhYuXKjSpUvbsTIAQG4iWAAATKlVq5b8/f21bNkya9uyZctUunRp1axZ09p248YNvfbaaypevLjc3NzUsGFDbd261eZYK1asUIUKFeTu7q6mTZvq+PHjmd5vw4YNCg0Nlbu7u/z9/fXaa68pJSXlgZ0fAODeECwAAKa98MILmjNnjvX17NmzFRERYdPnrbfe0tKlSzVv3jxt375d5cqVU3h4uC5duiRJOnXqlDp16qR27dpp586d6tOnj4YOHWpzjCNHjqhVq1Z66qmntHv3bi1evFgbNmzQgAEDHvxJAgDuiGABADDt+eef14YNG3TixAmdOHFCGzdu1PPPP2/dnpKSoo8//lgTJ05U69atVaVKFc2cOVPu7u6aNWuWJOnjjz9WYGCgJk+erIoVK+q5557LtD4jKipKzz33nAYNGqTy5curfv36+uCDD/TZZ5/p+vXruXnKAID/4WTvAgAA+V+xYsXUtm1bzZ07V4ZhqG3btvL29rZuP3LkiNLS0tSgQQNrm7Ozs+rWrav9+/dLkvbv36+QkBCb49arV8/m9a5du7R7924tWLDA2mYYhjIyMnTs2DFVrlz5QZweAOAeECwAADnihRdesE5Jmj59+gN5jz///FMvvfSSXnvttUzbWCgOAPZFsAAA5IhWrVopNTVVFotF4eHhNtsCAwPl4uKijRs36tFHH5UkpaWlaevWrRo0aJAkqXLlyvrmm29s9vvll19sXteqVUv79u1TuXLlHtyJAACyhTUWAIAc4ejoqP3792vfvn1ydHS02VagQAG9/PLLevPNNxUbG6t9+/apb9++unr1qnr37i1J6tevnw4fPqw333xTBw8e1MKFCzV37lyb4wwZMkSbNm3SgAEDtHPnTh0+fFhff/01i7cBIA8gWAAAckyhQoVUqFChLLeNGzdOTz31lLp3765atWrp999/16pVq1SkSBFJf01lWrp0qZYvX64aNWooJiZG77//vs0xqlevrvXr1+vQoUMKDQ1VzZo1NXLkSPn6+j7wcwMA3JnFMAzD3kUAAAAAyN8YsQAAAABgGsECAAAAgGkECwAAAACmESwAAAAAmEawAAAAAGAawQIAAACAaQQLAAAAAKYRLAAAAACYRrAAAAAAYBrBAgAAAIBpBAsAAAAAphEsAAAAAJj2/wAghQfTCrI1+gAAAABJRU5ErkJggg=="},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(8, 6)) \nplt.bar(results[\"Model\"], results[\"Mean Squared Error (MSE)\"], color='lightcoral', alpha=0.7)\nplt.xlabel(\"Model\")\nplt.ylabel(\"Mean Squared Error (MSE)\")\nplt.title(\"Mean Squared Error Comparison\")\nplt.xticks(rotation=45, ha=\"right\")  \nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:52.393615Z","iopub.execute_input":"2024-05-19T12:37:52.393952Z","iopub.status.idle":"2024-05-19T12:37:52.611799Z","shell.execute_reply.started":"2024-05-19T12:37:52.393925Z","shell.execute_reply":"2024-05-19T12:37:52.610849Z"},"trusted":true},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"y_predSUBMIT = modelXGB.predict(test)\nprint(y_predSUBMIT.size)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:52.612896Z","iopub.execute_input":"2024-05-19T12:37:52.613186Z","iopub.status.idle":"2024-05-19T12:37:52.631469Z","shell.execute_reply.started":"2024-05-19T12:37:52.613161Z","shell.execute_reply":"2024-05-19T12:37:52.630602Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"1000\n","output_type":"stream"}]},{"cell_type":"markdown","source":"SUBMIT","metadata":{}},{"cell_type":"code","source":"submission_df = pd.DataFrame({\n    'id': testId_SUBMIT,\n    'price_range':y_predSUBMIT\n})\nsubmission_df.head(50)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:52.632505Z","iopub.execute_input":"2024-05-19T12:37:52.634074Z","iopub.status.idle":"2024-05-19T12:37:52.646298Z","shell.execute_reply.started":"2024-05-19T12:37:52.634041Z","shell.execute_reply":"2024-05-19T12:37:52.645333Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"    id  price_range\n0    1     2.860133\n1    2     2.813507\n2    3     2.789409\n3    4     2.813507\n4    5     2.794167\n5    6     2.749020\n6    7     2.842043\n7    8     2.800458\n8    9     2.764079\n9   10     2.820062\n10  11     2.842179\n11  12     2.785014\n12  13     2.837159\n13  14     2.786194\n14  15     2.764079\n15  16     2.794167\n16  17     2.817536\n17  18     2.801654\n18  19     2.785014\n19  20     2.786194\n20  21     2.816056\n21  22     2.804468\n22  23     2.771135\n23  24     2.812849\n24  25     2.804468\n25  26     2.749020\n26  27     2.785884\n27  28     2.827611\n28  29     2.802477\n29  30     2.775034\n30  31     2.860143\n31  32     2.764079\n32  33     2.804468\n33  34     2.783690\n34  35     2.799584\n35  36     2.868238\n36  37     2.787737\n37  38     2.865186\n38  39     2.805300\n39  40     2.774720\n40  41     2.830161\n41  42     2.830161\n42  43     2.805795\n43  44     2.813507\n44  45     2.842179\n45  46     2.764079\n46  47     2.807129\n47  48     2.822925\n48  49     2.783690\n49  50     2.832984","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>price_range</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2.860133</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2.813507</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2.789409</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>2.813507</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>2.794167</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>2.749020</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>2.842043</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>2.800458</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>2.764079</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>2.820062</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>2.842179</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12</td>\n      <td>2.785014</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>2.837159</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>14</td>\n      <td>2.786194</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>15</td>\n      <td>2.764079</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>16</td>\n      <td>2.794167</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>2.817536</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>18</td>\n      <td>2.801654</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>19</td>\n      <td>2.785014</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>2.786194</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>21</td>\n      <td>2.816056</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>22</td>\n      <td>2.804468</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>23</td>\n      <td>2.771135</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>24</td>\n      <td>2.812849</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>25</td>\n      <td>2.804468</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>26</td>\n      <td>2.749020</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>27</td>\n      <td>2.785884</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>28</td>\n      <td>2.827611</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>29</td>\n      <td>2.802477</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>30</td>\n      <td>2.775034</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>31</td>\n      <td>2.860143</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>32</td>\n      <td>2.764079</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>33</td>\n      <td>2.804468</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>34</td>\n      <td>2.783690</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>35</td>\n      <td>2.799584</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>36</td>\n      <td>2.868238</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>37</td>\n      <td>2.787737</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>38</td>\n      <td>2.865186</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>39</td>\n      <td>2.805300</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>40</td>\n      <td>2.774720</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>41</td>\n      <td>2.830161</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>42</td>\n      <td>2.830161</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>43</td>\n      <td>2.805795</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>44</td>\n      <td>2.813507</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>45</td>\n      <td>2.842179</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>46</td>\n      <td>2.764079</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>47</td>\n      <td>2.807129</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>48</td>\n      <td>2.822925</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>49</td>\n      <td>2.783690</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>50</td>\n      <td>2.832984</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"submission_df.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T12:37:52.647638Z","iopub.execute_input":"2024-05-19T12:37:52.647993Z","iopub.status.idle":"2024-05-19T12:37:52.659093Z","shell.execute_reply.started":"2024-05-19T12:37:52.647946Z","shell.execute_reply":"2024-05-19T12:37:52.658145Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":"Any comments, suggestions, advice,etc. Please comment","metadata":{}}]}